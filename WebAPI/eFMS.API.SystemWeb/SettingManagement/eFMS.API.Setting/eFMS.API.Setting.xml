<?xml version="1.0"?>
<doc>
    <assembly>
        <name>eFMS.API.Setting</name>
    </assembly>
    <members>
        <member name="T:eFMS.API.Setting.Controllers.CustomsDeclarationController">
            <summary>
            A base class for an MVC controller without view support.
            </summary>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.#ctor(Microsoft.Extensions.Localization.IStringLocalizer{eFMS.API.Setting.DL.Common.LanguageSub},eFMS.API.Setting.DL.IService.ICustomsDeclarationService,Microsoft.Extensions.Caching.Distributed.IDistributedCache,eFMS.IdentityServer.DL.UserManager.ICurrentUser)">
            <summary>
            constructor
            </summary>
            <param name="localizer">inject interface IStringLocalizer</param>
            <param name="service">inject interface ICustomsDeclarationService</param>
            <param name="distributedCache"></param>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.Get">
            <summary>
            get the list of custom declarations
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.GetBy(System.String)">
            <summary>
            get the list of custom declarations by job id
            </summary>
            <param name="jobNo">jobId that want to retrieve custom declarations</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.Query(eFMS.API.Setting.DL.Models.Criteria.CustomsDeclarationCriteria)">
            <summary>
            get the list of custom declarations by conditions
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.Paging(eFMS.API.Setting.DL.Models.Criteria.CustomsDeclarationCriteria,System.Int32,System.Int32)">
            <summary>
            get and paging the list of custom declarations by conditions
            </summary>
            <param name="criteria">search conditions</param>
            <param name="pageNumber">page to retrieve data</param>
            <param name="pageSize">number items per page</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.AddNew(eFMS.API.Setting.DL.Models.CustomsDeclarationModel)">
            <summary>
            add new custom clearance
            </summary>
            <param name="model">object to add</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.Update(eFMS.API.Setting.DL.Models.CustomsDeclarationModel)">
            <summary>
            update an existed item
            </summary>
            <param name="model">object to update</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.Delete(System.Int32)">
            <summary>
            delete an existed item
            </summary>
            <param name="id">id of existed item that want to delete</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.ImportClearancesFromEcus">
            <summary>
            import custom declaration from ecus system
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.GetClearanceTypes">
            <summary>
            get clearance types(types, cargoTypes, routes, serviceTypes)
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.UpdateJobToClearances(System.Collections.Generic.List{eFMS.API.Setting.DL.Models.CustomsDeclarationModel})">
            <summary>
            add( update) job to clearances
            </summary>
            <param name="clearances">list of clearances</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.GetById(System.Int32)">
            <summary>
            get custom declarations by id
            </summary>
            <param name="id">id that want to retrieve custom declarations</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.DeleteMultiple(System.Collections.Generic.List{eFMS.API.Setting.DL.Models.CustomsDeclarationModel})">
            <summary>
            delete multiple custom clearance
            </summary>
            <param name="customs">list of clearances selected</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.DownloadExcel">
            <summary>
            download file excel from server
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.UploadFile(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            read data from file excel
            </summary>
            <param name="uploadedFile"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.CustomsDeclarationController.Import(System.Collections.Generic.List{eFMS.API.Setting.DL.Models.CustomsDeclarationModel})">
            <summary>
            import list custom clearance
            </summary>
            <param name="data">list custom clearance</param>
            <returns></returns>
        </member>
        <member name="T:eFMS.API.Setting.Controllers.EcusConnectionController">
            <summary>
            A base class for an MVC controller without view support.
            </summary>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.EcusConnectionController.#ctor(Microsoft.Extensions.Localization.IStringLocalizer{eFMS.API.Setting.Resources.LanguageSub},eFMS.API.Setting.DL.IService.IEcusConnectionService)">
            <summary>
            constructor
            </summary>
            <param name="localizer">inject interface IStringLocalizer</param>
            <param name="service">inject interface IEcusConnectionService</param>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.EcusConnectionController.AddNew(eFMS.API.Setting.DL.Models.SetEcusConnectionModel)">
            <summary>
            add new ecus connection
            </summary>
            <param name="model">model to add</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.EcusConnectionController.Update(eFMS.API.Setting.DL.Models.SetEcusConnectionModel)">
            <summary>
            update an existed item
            </summary>
            <param name="model">object to update</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.EcusConnectionController.Delete(System.Int32)">
            <summary>
            delete an existed item
            </summary>
            <param name="id">id of item want to delete</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.EcusConnectionController.Paging(eFMS.API.Setting.DL.Models.Criteria.SetEcusConnectionCriteria,System.Int32,System.Int32)">
            <summary>
            get and paging the list of custom declarations by conditions
            </summary>
            <param name="criteria">search conditions</param>
            <param name="pageNumber">page to retrieve data</param>
            <param name="pageSize">number items per page</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.EcusConnectionController.GetAll">
            <summary>
            get all ecus connections
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.EcusConnectionController.GetDetails(System.Int32)">
            <summary>
            get detail of ecus connection by id
            </summary>
            <param name="id">id of data that want to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Setting.Controllers.EcusConnectionController.GetDataEcusByUser(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            get data from ecus system by user id
            </summary>
            <param name="userId">user id</param>
            <param name="serverName">server name</param>
            <param name="dbusername">user name sql</param>
            <param name="dbpassword">password sql</param>
            <param name="database">database name</param>
            <returns></returns>
        </member>
    </members>
</doc>
