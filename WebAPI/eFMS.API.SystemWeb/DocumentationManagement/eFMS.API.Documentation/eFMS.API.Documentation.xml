<?xml version="1.0"?>
<doc>
    <assembly>
        <name>eFMS.API.Documentation</name>
    </assembly>
    <members>
        <member name="T:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController">
            <summary>
            A base class for an MVC controller without view support.
            </summary>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.#ctor(Microsoft.Extensions.Localization.IStringLocalizer{eFMS.API.Documentation.DL.Common.LanguageSub},eFMS.API.Documentation.DL.IService.IAcctAdvancePaymentService,eFMS.IdentityServer.DL.UserManager.ICurrentUser)">
            <summary>
            Contructor
            </summary>
            <param name="localizer"></param>
            <param name="service"></param>
            <param name="user"></param>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.Paging(eFMS.API.Documentation.DL.Models.Criteria.AcctAdvancePaymentCriteria,System.Int32,System.Int32)">
            <summary>
            get and paging the list of Advance Payment by conditions
            </summary>
            <param name="criteria">search conditions</param>
            <param name="pageNumber">page to retrieve data</param>
            <param name="pageSize">number items per page</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.GetGrpRequestsByAdvanceNo(System.String)">
            <summary>
            Get Group Requests by AdvanceNo
            </summary>
            <param name="advanceNo">advanceNo that want to retrieve Advance Request</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.GetGrpRequestsByAdvanceId(System.Guid)">
            <summary>
            Get Group Requests by AdvanceId
            </summary>
            <param name="advanceId">advanceId that want to retrieve Advance Request</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.GetShipments">
            <summary>
            Get shipments (JobId, HBL, MBL) from shipment documentation and shipment operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.Add(eFMS.API.Documentation.DL.Models.AcctAdvancePaymentModel)">
            <summary>
            add new advance payment (include advance request)
            </summary>
            <param name="model">object to add</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.CheckShipmentsExistInAdvancePayment(eFMS.API.Documentation.DL.Models.Criteria.ShipmentAdvancePaymentCriteria)">
            <summary>
            Check shipment exists in advance payment
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.Delete(System.String)">
            <summary>
            delete an advance payment existed item
            </summary>
            <param name="advanceNo">advanceNo of existed item that want to delete</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.GetAdvancePaymentByAdvanceNo(System.String)">
            <summary>
            Get Advance Payment by AdvanceNo
            </summary>
            <param name="advanceNo">advanceNo that want to retrieve Advance Payment</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.GetAdvancePaymentByAdvanceId(System.Guid)">
            <summary>
            Get Advance Payment by AdvanceId
            </summary>
            <param name="advanceId">advanceId that want to retrieve Advance Payment</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.Update(eFMS.API.Documentation.DL.Models.AcctAdvancePaymentModel)">
            <summary>
            Update Advance Payment
            </summary>
            <param name="model">object to update</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.PreviewAdvancePaymentRequest(System.Guid)">
            <summary>
            Preview Advance Payment Request By Advance Id
            </summary>
            <param name="advanceId">advanceId that want to retrieve preview advance payment request</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.PreviewAdvancePaymentRequest(eFMS.API.Documentation.DL.Models.AcctAdvancePaymentModel)">
            <summary>
            Preview Advance Payment Request
            </summary>
            <param name="advance"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.SaveAndSendRequest(eFMS.API.Documentation.DL.Models.AcctAdvancePaymentModel)">
            <summary>
            Save and Send Request
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.UpdateApprove(System.Guid)">
            <summary>
            Update Approve Advance
            </summary>
            <param name="addvanceId">addvanceId that want to retrieve Update Approve</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.DeniedApprove(System.Guid,System.String)">
            <summary>
            Denie Approve Advance
            </summary>
            <param name="advanceId">advanceId that want to retrieve Denie Approve</param>
            <param name="comment">comment reason that want to retrieve Denie Approve</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctAdvancePaymentController.GetInfoApproveAdvanceByAdvanceNo(System.String)">
            <summary>
            Get information approve advance by advanceNo
            </summary>
            <param name="advanceNo">advanceNo that want to retrieve approve advance</param>
            <returns></returns>
        </member>
        <member name="T:eFMS.API.Documentation.Controllers.AcctSOAController">
            <summary>
            A base class for an MVC controller without view support.
            </summary>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctSOAController.#ctor(Microsoft.Extensions.Localization.IStringLocalizer{eFMS.API.Documentation.DL.Common.LanguageSub},eFMS.API.Documentation.DL.IService.IAcctSOAService,eFMS.IdentityServer.DL.UserManager.ICurrentUser)">
            <summary>
            constructor
            </summary>
            <param name="localizer"></param>
            <param name="service"></param>
            <param name="user"></param>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctSOAController.Get">
            <summary>
            get the list of SOA
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctSOAController.AddNew(eFMS.API.Documentation.DL.Models.AcctSoaModel)">
            <summary>
            add new SOA
            </summary>
            <param name="model">object to add</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctSOAController.Paging(eFMS.API.Documentation.DL.Models.Criteria.AcctSOACriteria,System.Int32,System.Int32)">
            <summary>
            get and paging the list of SOA by conditions
            </summary>
            <param name="criteria">search conditions</param>
            <param name="pageNumber">page to retrieve data</param>
            <param name="pageSize">number items per page</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctSOAController.Delete(System.String)">
            <summary>
            delete an existed item
            </summary>
            <param name="soaNo">soaNo of existed item that want to delete</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctSOAController.GetBySoaNoAndCurrencyLocal(System.String,System.String)">
            <summary>
            get SOA by soaNo and currencyLocal
            </summary>
            <param name="soaNo">soaNo that want to retrieve SOA</param>
            <param name="currencyLocal">currencyLocal that want to retrieve SOA</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctSOAController.GetListServices">
            <summary>
            get list services
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctSOAController.GetListStatusSoa">
            <summary>
            get list status of soa
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctSOAController.UpdateSOA(eFMS.API.Documentation.DL.Models.AcctSoaModel)">
            <summary>
            Update SOA
            </summary>
            <param name="model">object to update</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctSOAController.GetShipmentsAndCDdNotesNotExistInResultFilter(eFMS.API.Documentation.DL.Models.Criteria.MoreChargeShipmentCriteria)">
            <summary>
            Get list shipment(JobId, HBL, MBL) and list CDNotes(CreditDebitNo) not exist in result filter
            </summary>
            <param name="criteria">search conditions</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctSOAController.GetListMoreChargeByCondition(eFMS.API.Documentation.DL.Models.Criteria.MoreChargeShipmentCriteria)">
            <summary>
            get list more charge not exists in list charge on form Info
            </summary>
            <param name="criteria">search conditions</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctSOAController.AddMoreCharge(eFMS.API.Documentation.DL.Models.Criteria.AddMoreChargeCriteria)">
            <summary>
            add more charge
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.AcctSOAController.GetDataExportSOABySOANo(System.String,System.String)">
            <summary>
            Export SOA detail by SOANo
            </summary>
            <param name="soaNo">soaNo that want to retrieve SOA</param>
            <param name="currencyLocal">currencyLocal that want to retrieve SOA</param>
            <returns></returns>
        </member>
        <member name="T:eFMS.API.Documentation.Controllers.CsShipmentSurchargeController">
            <summary>
            A base class for an MVC controller without view support.
            </summary>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsShipmentSurchargeController.#ctor(Microsoft.Extensions.Localization.IStringLocalizer{eFMS.API.Documentation.DL.Common.LanguageSub},eFMS.API.Documentation.DL.IService.ICsShipmentSurchargeService,eFMS.IdentityServer.DL.UserManager.ICurrentUser)">
            <summary>
            constructor
            </summary>
            <param name="localizer"></param>
            <param name="service"></param>
            <param name="user"></param>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsShipmentSurchargeController.GetByHouseBill(System.Guid,System.String)">
            <summary>
            get list of surcharge by house bill and type
            </summary>
            <param name="hbId"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsShipmentSurchargeController.GetByListHouseBill(System.Guid,System.String,System.Boolean)">
            <summary>
            get list of surcharge by house bill anf partner id
            </summary>
            <param name="Id"></param>
            <param name="partnerID"></param>
            <param name="IsHouseBillID"></param>
            <param name="isAddCDNote"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsShipmentSurchargeController.GetPartners(System.Guid,System.Boolean)">
            <summary>
            get partners have surcharge
            </summary>
            <param name="Id"></param>
            <param name="IsHouseBillID"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsShipmentSurchargeController.AddNew(eFMS.API.Documentation.DL.Models.CsShipmentSurchargeModel)">
            <summary>
            add new surcharge
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsShipmentSurchargeController.Update(eFMS.API.Documentation.DL.Models.CsShipmentSurchargeModel)">
            <summary>
            update an existed surcharge
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsShipmentSurchargeController.Delete(System.Guid)">
            <summary>
            delete an existed surcharge
            </summary>
            <param name="chargId"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsShipmentSurchargeController.ListChargeShipment(eFMS.API.Documentation.DL.Models.Criteria.ChargeShipmentCriteria)">
            <summary>
            Get list charge shipment by conditions
            </summary>
            <returns></returns>
        </member>
        <member name="T:eFMS.API.Documentation.Controllers.CsTransactionController">
            <summary>
            A base class for an MVC controller without view support.
            </summary>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsTransactionController.#ctor(Microsoft.Extensions.Localization.IStringLocalizer{eFMS.API.Documentation.DL.Common.LanguageSub},eFMS.API.Documentation.DL.IService.ICsTransactionService,eFMS.IdentityServer.DL.UserManager.ICurrentUser,eFMS.API.Documentation.DL.IService.ICsShipmentSurchargeService)">
            <summary>
            constructor
            </summary>
            <param name="localizer">inject IStringLocalizer</param>
            <param name="service">inject ICsTransactionService</param>
            <param name="user">inject ICurrentUser</param>
            <param name="serviceSurcharge">inject ICsShipmentSurchargeService</param>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsTransactionController.CountJob(System.DateTime)">
            <summary>
            count job by date
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsTransactionController.GetTotalProfit(System.Guid)">
            <summary>
            get total profit by job
            </summary>
            <param name="JobId">job id that want to get total profit</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsTransactionController.Query(eFMS.API.Documentation.DL.Models.Criteria.CsTransactionCriteria)">
            <summary>
            get list transactions by search condition
            </summary>
            <param name="criteria">search condition</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsTransactionController.Paging(eFMS.API.Documentation.DL.Models.Criteria.CsTransactionCriteria,System.Int32,System.Int32)">
            <summary>
            get and paging list transaction by search condition
            </summary>
            <param name="criteria">search condition</param>
            <param name="page">page to retrieve data</param>
            <param name="size">number items per page</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsTransactionController.Get(System.Guid)">
            <summary>
            get transaction by id
            </summary>
            <param name="id">id that want to retrieve transaction</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsTransactionController.Post(eFMS.API.Documentation.DL.Models.CsTransactionEditModel)">
            <summary>
            add new transaction
            </summary>
            <param name="model">model to update</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsTransactionController.Import(eFMS.API.Documentation.DL.Models.CsTransactionEditModel)">
            <summary>
            import transaction
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsTransactionController.Put(eFMS.API.Documentation.DL.Models.CsTransactionEditModel)">
            <summary>
            update an existed item
            </summary>
            <param name="model">model to update</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsTransactionController.Delete(System.Guid)">
            <summary>
            delete an existed item
            </summary>
            <param name="id">id of existed data that want to delete</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.CsTransactionController.CheckAllowDelete(System.Guid)">
            <summary>
            check allow delete an existed item
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:eFMS.API.Documentation.Controllers.OpsTransactionController">
            <summary>
            A base class for an MVC controller without view support.
            </summary>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.OpsTransactionController.#ctor(Microsoft.Extensions.Localization.IStringLocalizer{eFMS.API.Documentation.DL.Common.LanguageSub},eFMS.IdentityServer.DL.UserManager.ICurrentUser,eFMS.API.Documentation.DL.IService.IOpsTransactionService,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            constructor
            </summary>
            <param name="localizer">inject IStringLocalizer</param>
            <param name="user">inject ICurrentUser</param>
            <param name="service">inject IOpsTransactionService</param>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.OpsTransactionController.Query(eFMS.API.Documentation.DL.Models.Criteria.OpsTransactionCriteria)">
            <summary>
            get the list of countries by conditions
            </summary>
            <param name="criteria">search conditions</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.OpsTransactionController.Get(System.Guid)">
            <summary>
            get data detail by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.OpsTransactionController.Paging(eFMS.API.Documentation.DL.Models.Criteria.OpsTransactionCriteria,System.Int32,System.Int32)">
            <summary>
            get and paging the list of countries by conditions
            </summary>
            <param name="criteria">search conditions</param>
            <param name="page">page to retrieve data</param>
            <param name="size">number items per page</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.OpsTransactionController.Add(eFMS.API.Documentation.DL.Models.OpsTransactionModel)">
            <summary>
            add new job
            </summary>
            <param name="model">object to add</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.OpsTransactionController.Update(eFMS.API.Documentation.DL.Models.OpsTransactionModel)">
            <summary>
            update an existed item
            </summary>
            <param name="model">object to update</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.OpsTransactionController.Delete(System.Guid)">
            <summary>
            delete an existed item
            </summary>
            <param name="id">id of item that want to delete</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.OpsTransactionController.CheckAllowDelete(System.Guid)">
            <summary>
            check an item that is allowed delete
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.OpsTransactionController.ConvertClearanceToJob(eFMS.API.Documentation.DL.Models.OpsTransactionClearanceModel)">
            <summary>
            convert a custom clearance to a job
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.OpsTransactionController.ConvertExistedClearancesToJobs(System.Collections.Generic.List{eFMS.API.Documentation.DL.Models.OpsTransactionClearanceModel})">
            <summary>
            convert multi clearances to multi jobs
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.OpsTransactionController.DownloadExcel">
            <summary>
            download file excel from server
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.OpsTransactionController.UploadFileContainer(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            read data from file excel
            </summary>
            <param name="uploadedFile"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Documentation.Controllers.OpsTransactionController.Importcontainer(System.Collections.Generic.List{eFMS.API.Documentation.DL.Models.CsMawbcontainerImportModel})">
            <summary>
            import list container
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
    </members>
</doc>
